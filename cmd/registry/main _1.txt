package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
)

type EventDefinition struct {
	ID          string            `json:"id"`
	Type        string            `json:"type"`
	Source      string            `json:"source"`
	SpecVersion string            `json:"specversion"`
	Data        map[string]string `json:"data"`
}

type Group struct {
	Type    string            `json:"type"`
	ID      string            `json:"id"`
	Name    string            `json:"name"`
	Version string            `json:"version"`
	Events  []EventDefinition `json:"events"`
}

func handleGroups(w http.ResponseWriter, r *http.Request) {

	groups := loadGroups()

	// assume "groups" is a slice of Group objects
	// that have been populated with data
	groupsJSON, err := json.Marshal(groups)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.Write(groupsJSON)
}

func loadGroups() []Group {
	group1 := Group{
		Type:    "group",
		ID:      "microsoft.eventgrid",
		Name:    "myeventsubscription",
		Version: "1.0",
		Events: []EventDefinition{
			{
				ID:          "myorg.myapp.myevent1",
				Type:        "myeventtype",
				Source:      "/myeventsource",
				SpecVersion: "1.0",
				Data: map[string]string{
					"key1": "value1",
					"key2": "value2",
				},
			},
			{
				ID:          "myorg.myapp.myevent2",
				Type:        "myeventtype",
				Source:      "/myeventsource",
				SpecVersion: "1.0",
				Data: map[string]string{
					"key1": "value1",
					"key2": "value2",
				},
			},
		},
	}

	group2 := Group{
		Type:    "group",
		ID:      "microsoft.eventhub",
		Name:    "myeventsubscription",
		Version: "1.0",
		Events: []EventDefinition{
			{
				ID:          "myorg.myapp.myevent1",
				Type:        "myeventtype",
				Source:      "/myeventsource",
				SpecVersion: "1.0",
				Data: map[string]string{
					"key1": "value1",
					"key2": "value2",
				},
			},
			{
				ID:          "myorg.myapp.myevent2",
				Type:        "myeventtype",
				Source:      "/myeventsource",
				SpecVersion: "1.0",
				Data: map[string]string{
					"key1": "value1",
					"key2": "value2",
				},
			},
		},
	}

	groups := []Group{group1, group2}
	return groups
}

func handleGroupByID(w http.ResponseWriter, r *http.Request) {
	groups := loadGroups()

	// Get the group ID from the URL path
	id := strings.TrimPrefix(r.URL.Path, "/groups/")

	// Find the group with the matching ID
	var group *Group
	for _, g := range groups {
		if g.ID == id {
			group = &g
			break
		}
	}

	// If the group is not found, return a 404 error
	if group == nil {
		http.Error(w, fmt.Sprintf("Group with ID %s not found", id), http.StatusNotFound)
		return
	}

	// Return the group as JSON
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(group)
}

func main() {
	// assume "groups" is a slice of Group objects
	// that have been populated with data
	http.HandleFunc("/groups", handleGroups)
	http.HandleFunc("/groups/", handleGroupByID)

	http.ListenAndServe(":8080", nil)
}
